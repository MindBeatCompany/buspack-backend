/// <reference types="node" />
import { Repository } from "typeorm";
import { ServiceRequestEntity } from "./entities/service-request.entity";
import { AccountEntity } from "../account/entities/account.entity";
import { QueryServiceRequestDto } from "./dtos";
import { ServicesSaitService } from "../services-sait/services-sait.service";
import { GeneralSettingsEntity } from "../general-settings/entities/general-settings.entity";
import { TariffEntity } from "../user/entities/tariff.entity";
import { ZonesEntity } from "../enabled-places/entities/zonescp.entity";
import { LocalityEntity } from "../enabled-places/entities/location.entity";
import { EnabledPlaceEntity } from "../enabled-places/entities/enabled-places.entity";
import { LabelServiceRequestDto } from "./dtos/label-service-request.dto";
import { CreateFormatServiceRequestDto } from "./dtos/format-service-request/create-format-service-request.dto";
import FormatServiceRequestEntity from "./entities/format-sr.entity";
import FieldNumberEntity from "./entities/field-number-sr.entity";
import FieldBooleanEntity from "./entities/field-boolean-sr.entity";
import FieldStringEntity from "./entities/field-string-sr.entity";
import AccountLocalityEntity from "./entities/account-locality.entity";
import FormatEnabledPlaceFinder from "./helpers/enabled-place-finder/format-enabled-place-finder";
import DefaultServiceRequestValidator from "./helpers/validators/default-service-request-validator";
import FormatServiceRequestValidator from "./helpers/validators/format-service-request-validator";
import DefaultEnabledPlaceFinder from "./helpers/enabled-place-finder/default-enabled-place-finder";
import UpdateFsrValidator from "./helpers/validators/update-fsr-validator";
import PlanillaExcelEntity from "./entities/planilla_excel.entity";
export declare class ServiceRequestService {
    private serviceRequestRepository;
    private readonly generalSettingsRepository;
    private readonly tariffRepository;
    private readonly zonesRepository;
    private readonly accountRepository;
    private readonly localityRepository;
    private readonly enabledPlaceRepository;
    private readonly formatSrRepository;
    private readonly fieldNumberRepositoty;
    private readonly fieldStringRepository;
    private readonly fieldBooleanRepository;
    private readonly accountLocalityRepository;
    private readonly planillaExcelRepository;
    private readonly serviceSaitService;
    private readonly formatEnabledPlaceFinder;
    private readonly defaultEnabledPlacesFinder;
    private readonly defaultSrValidator;
    private readonly fsrValidator;
    private readonly updateFsrValidator;
    private error;
    private srFileReader;
    private localityToFormatValidator;
    constructor(serviceRequestRepository: Repository<ServiceRequestEntity>, generalSettingsRepository: Repository<GeneralSettingsEntity>, tariffRepository: Repository<TariffEntity>, zonesRepository: Repository<ZonesEntity>, accountRepository: Repository<AccountEntity>, localityRepository: Repository<LocalityEntity>, enabledPlaceRepository: Repository<EnabledPlaceEntity>, formatSrRepository: Repository<FormatServiceRequestEntity>, fieldNumberRepositoty: Repository<FieldNumberEntity>, fieldStringRepository: Repository<FieldStringEntity>, fieldBooleanRepository: Repository<FieldBooleanEntity>, accountLocalityRepository: Repository<AccountLocalityEntity>, planillaExcelRepository: Repository<PlanillaExcelEntity>, serviceSaitService: ServicesSaitService, formatEnabledPlaceFinder: FormatEnabledPlaceFinder, defaultEnabledPlacesFinder: DefaultEnabledPlaceFinder, defaultSrValidator: DefaultServiceRequestValidator, fsrValidator: FormatServiceRequestValidator, updateFsrValidator: UpdateFsrValidator);
    downloadFile(): Promise<Buffer>;
    getAll(): Promise<ServiceRequestEntity[]>;
    updateRequests(): Promise<void>;
    updateRequestsBetweenDates(fromDate: string, toDate: string, account: AccountEntity): Promise<void>;
    getByRequestIdVoucherAndDelivery(requestId: string, voucher: string, delivery: string, account: AccountEntity, dateFrom: string, dateTo: string): Promise<LabelServiceRequestDto[]>;
    getByQuery(requestId: string, voucher: string, delivery: string, fromDate: string, toDate: string, account: AccountEntity): Promise<QueryServiceRequestDto[]>;
    uploadFile(file: any, account: AccountEntity, isStandardFormat: boolean): Promise<any>;
    private validateTotalWeightAndQtyPiecesOnTariff;
    private getEpDtv;
    private epFieldsHaveErrors;
    private roundNumericFields;
    private validateEPIsCurrentlyEnabled;
    private getStringFields;
    private getNumberFields;
    private getBooleanFields;
    getFieldnamesPositions(fieldStringRows: any, fieldNumberRows: any, fieldBooleanRows: any): any[];
    getAreValidFieldsToGetEP(localityErrorStatus: string, provinceErrorStatus: string, cpaErrorStatus: string): boolean;
    validateAttributte(value: any, type: string, empty?: boolean): {
        value: any;
        status: string;
        error: string;
    };
    createRequest(body: any, account: AccountEntity, isStandardFormat: string): Promise<{
        created: boolean;
        data: any[];
    } | {
        created: boolean;
        data: {
            createRequest: {
                qty: number;
                detail: string;
            };
            errorRequest: {
                qty: number;
                detail: string;
            };
            warningRequest: {
                qty: number;
                detail: string;
            };
        };
    }>;
    private validatedFsrHasErrors;
    private checkFsrRowHasErrors;
    private createSaitRequest;
    private saveAllData;
    private saveData;
    private round;
    createFormatServiceRequest(fsrDto: CreateFormatServiceRequestDto): Promise<void>;
    private transformNumericRequestFields;
    private getNumericRequestFieldsDto;
    private getPositionsFromDto;
    private saveFsrFields;
    private saveFsrFieldsAux;
    getFormatLocalitiesXls(): Promise<string>;
    uploadFormatLocalitiesXls(accountId: number, file: any): Promise<void>;
    private getFormatLocalities;
    private getHttpErrorIf;
    private saveFormatLocalities;
    private saveFormatLocality;
    private getEnabledPlace;
    private getAccount;
    getFormatServiceRequest(accountId: number): Promise<{}>;
    private getFsr;
    updateFormatServiceRequest(updateFsrDto: any): Promise<void>;
    private updateFsrRequestFields;
    private updateStringField;
    private updateCommonFields;
    private getDTVDefaultServiceRequest;
    getFormatLocalitiesXlsAccount(accountId?: number): Promise<string>;
    private getXlsLocalitiesWorkbook;
    updateFormatLocalitiesXlsAccount(accountId: number, file: any): Promise<string>;
    getLocalitiesByAccountId(accountId: number): Promise<any>;
}
